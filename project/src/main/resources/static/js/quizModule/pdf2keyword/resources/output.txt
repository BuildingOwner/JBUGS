Chapter linked list 11 11 List linked chapter Q&amp;A - Ask questions at any time. If you don&#39;t know what you want, just memorize it, but if you can&#39;t code, be sure to ask questions ➔ Final open book coding test, internet blocking 1. Hansung e-class Q&amp;A bulletin board 2. Online coding lounge (announcement for details) bulletin board) □ The instructor&#39;s number 1 is your questions □ Practice problems with answers every week Be sure to solve odd-numbered problems 11xsy-2=2 119-5 Data structure easily written in C ● Saengneung Publishing Company 2019 Q &amp; A Ask a question When Rado - If you don&#39;t know, you can memorize it, but if you can&#39;t code, be sure to ask questions ➔ Final open book coding test, internet blocked 1. Hansung e-class question and answer bulletin board 2. Online coding lounge (announcement bulletin board for details) □ The number 1 instructor is your teacher. Questions □ Practice problems with answers every week Be sure to solve odd-numbered problems 2 - 2 = 11xsy 119-5 Saengneung Publishing Company 2019 Data structure easily explained in C ● In the future, I can do it (Chapter 7 Goal) 1. I will create a list data structure as a prototype It can be implemented as a linked list. 2. I can implement the list data structure as a doubly linked list. 3.I can implement the stack data structure as a linked list. 4. I can implement the queue data structure as a linked list. The relationship between a grist and a linked list has nothing to do with the relationship between a ham and a hamster. The grist data structure can be implemented as an array or a linked list. Glist is an ordered group consisting of n elements. Example: My To-Do list, My bucket list Data structure easily written in C ● Saengneung Publishing Company 2019 In the future, I can do it (Chapter 7 Goal) 1. I can create a list data structure It can be implemented as a circular linked list. 2. I can implement the list data structure as a doubly linked list. 3. I can implement the stack data structure as a linked list. 4. I can implement the queue data structure as a linked list. The relationship between the list and the linked list has nothing to do with the relationship between ham and hamster. The list data structure can be implemented as an array or linked list. The list is an ordered group consisting of n elements: My To-Do list, My bucket list Example Saengneung Publishing Company 2019 Data structure easily explained in C ● 3 types of linked list Head pointer Lead pointer·Head pointer Easily solved in C Written data structure Simple linked list Circular linked list Doubly linked list ● Saengneung Publishing Company 2019 3 types of NULL linked list NULL Head pointer Simple linked list Lead pointer · Circular linked list Head pointer Doubly linked list Data structure easily explained in C ● Saengneung Publishing Company For 2019, here is the list LO LE ㅁ A list where the link of the last node points to the first node ㅁ Access is possible from one node to all other nodes - A simply linked list must always start at the headpoint head Red Pointer 40 Easily solved in C Written data structure 20 Simple linked list ● Saengneung Publishing Company 2019 30 Click here for NULL list LO LE ㅁ List where the link of the last node points to the first node ㅁ Access from one node to all other nodes is possible - Simple linked list always has the head point Must start from head 40 20 30 NULL Red pointer Simple linked list Data structure easily interpreted in C ● List here for Saengneung Publisher 2019 LO LE ㅁ Usually, if the head pointer is configured to point to the last node, the node is at the beginning or end of the list. The operation to insert is easier than a simple linked list. 40 Data structure easily written in C 1 10 ● Saengneung Publishing Company 2019 20 head 30 Here for the list LO LE ㅁ Usually, if the head pointer is configured to point to the last node, it is at the beginning or The operation of inserting a node at the end is easier compared to a simple linked list. head 1 40 20 10 30 Data structure easily interpreted in C ● Saengneung Publisher 2019 node node data easily interpreted in C for inserting insert_first() at the beginning of a circular linked list Structure 10 10 + 10 . 23 + 28 20 ● Saengneung Publishing Company 2019 head head head 30 30 30 To insert at the beginning of a circular linked list, insert_first () head 10 23 30 head node 10 + 28 30 + node head 30 10 20. Data structure easily written in C ● Saengneung Publishing Company 2019 For the sake of the list LO LE at the beginning Student&gt; Professor~ Even after looking at the code, I don&#39;t understand it. | ListNode* insert_first(ListNode* head, element data) { 1} ListNode *node = (ListNode*)malloc(sizeof(ListNode)); node-&gt;data = data; if (head == NULL) { } else { head = node; node-&gt;link = head; node-&gt;link = head-&gt;link; head-&gt;link = node; // (1) // (2) } return head; // Returns the changed head pointer. Data structure easily written in C ● Saengneung Publishing Company 2019 Between at the beginning of the list Between at the beginning LO LE Student &gt; Professor ~ Even after looking at the code, I don&#39;t understand it. | ListNode * insert_first ( ListNode * head , element data ) { ListNode * node = ( ListNode * ) malloc ( sizeof ( ListNode ) ) ; node- &gt; data = data ; if ( head == NULL ) { head = node ; node- &gt; link = head ; } else { node- &gt; link = head- &gt; link ; // (1) head- &gt; link = node ; // returns (2) }. return head ; // Changed head pointer } 1 Data structure easily written in C ● Saengneung Publisher 2019 At the beginning of the list, LO LE ㅂㅂ | ListNode&quot; insert_first(ListNode* head, element data) { |} ListNode *node = (ListNode *)malloc(sizeof(ListNode)); node-&gt;data = data; if (head == NULL) { } else { head = node; node-&gt;link = head; _node-&gt;link = head-&gt;link; head-&gt;link = node; // (1) // (2) } return head; // Returns the changed head pointer. C Data structure easily written in ● Saengneung Publishing Company 2019 1455 (1) N beal Choi Eun-ju (2) Initially considered for the sake of the list&#39;s ㅂㅂ LO LE | ListNode &quot; insert_first ( ListNode * head , element data ) { ListNode * node = ( ListNode * ) malloc ( sizeof ( ListNode ) ) ; node- &gt; data = data ; if ( head == NULL ) { head = node ; node- &gt; link = head ; } else { _node- &gt; link = head- &gt; link ; // (1) head- &gt; link = node ; // (2) beal } Returns a pointer. return head ; // changed head } | 1 ) ( N Choi Eun-ju&#39;s entry 2 ) ( 1455 Data structure easily written in C ● Saengneung Publishing Company 2019 Between the end of our list E ㅂㅂ node 40 Data structure easily written in C 10 20 ● Saengneung Publishing Company 2019 head 30 Between the end of our list ㅂㅂ E node head 20 40 10 30 Data structure easily interpreted and written in C ● Saengneung Publishing Company 2019 Insert at the end of the list (insert_last()) Student&gt; Professor~ There are only pictures for step (3). (1) What is the picture for step (2)? | ListNode* insert_last(ListNode* head, element data) { ListNode *node = (ListNode*)malloc(sizeof(ListNode)); node-&gt;data = data; if (head == NULL) { } node else{ _head = node; node-&gt;link = head; } return head; // Returns the changed head pointer. 40 _node-&gt;link = head-&gt;link;// (1) head-&gt;link = node; // (2) head = node; 11 (3) 10 20 head 30 Insert at the end of the list (insert_last ()) Student &gt; Professor ~ There is only a picture of step (3). What is a picture of step (1) (2)? | ListNode * insert_last ( ListNode * head , element data ) { ListNode * node = ( ListNode * ) malloc ( sizeof ( ListNode ) ) ; node- &gt; data = data ; if ( head == NULL ) { _head = node ; node- &gt; link = head ; } else { _node- &gt; link = head- &gt; link ; // ( 1 ) head- &gt; link = node ; // ( 2 ) head = node ; 11 ( 3 ) } return head ; // Return the changed head pointer head node 40 10 20 30 [Insert at the end of the list (insert_last()) | ListNode* insert_last(ListNode* head, element data) { ListNode *node = (ListNode*)malloc(sizeof(ListNode)); node-&gt;data = data; if (head == NULL) { head = node; node-&gt;link = head; } else { node } return head; // Returns the changed head pointer. _node-&gt;link = head-&gt;link;// (1) head-&gt;link = node; // (2) head = node; // (3) 40 SE NIT 10 20 rote VON CUIS 1965 (3) head &quot; 30 33 33 head Acad 30 38 (2) [ insert at the end of the list ( insert_last ( ) ) | ListNode * insert_last ( ListNode * head , element data ) { ListNode * node = ( ListNode * ) malloc ( sizeof ( ListNode ) ) ; node- &gt; data = data ; if ( head == NULL ) { head = node ; node- &gt; link = head ; head } 33 30 else { _node- &gt; link = head- &gt; link ; // ( 1 ) head- &gt; link = node ; // ( 2 ) rote Acad head = node ; // ( 3 ) &quot; } Returns . return head ; // Changed head pointer 2) (1965 33 38 (3) head node 10 40 20 30 SE NIT VON CUIS test program #include<stdio.h> #include<stdlib.h> typedef int element; typedef struct ListNode { //Node type element data; struct ListNode *link; } ListNode; // Print items in the list void print_list(ListNode* head) { ListNode* p; if (head == NULL) return; p = head-&gt;link; do { printf(&quot;%d-&gt;&quot;, p-&gt;data); p = p-&gt;link; } while (p != head); printf(&quot;%d-&gt;&quot;, p-&gt;data); // Data structure easily written in O C ● Saengneung Publishing Company 2019 test program #include &lt; stdio.h &gt; #include &lt; stdlib.h &gt; typedef int element ; // Node type typedef struct ListNode { element data ; struct ListNode * link ; ListNode ; } // Print items in the list void print_list (ListNode * head) { ListNode * p; if ( head == NULL ) return ; link ; = head- &gt; p do { printf ( &quot; % d- &gt; &quot; , p- &gt; data ) ; p = p- &gt; link ; } while ( p ! = head ) ; data ) ; // O printf (&quot; % d- &gt; &quot;, p- &gt; Data structure easily written in C ● Saengneung Publishing Company 2019 test program int main(void) { ListNode *head = NULL; // list = 10-&gt;20-&gt; 30-&gt;40 _head = insert_last(head, 20); head = insert_last(head, 30); _head = insert_last(head, 40); head = insert_first(head, 10); print_list(head); return 0; 10- &gt;20-&gt;30-&gt;40-&gt; Data structure easily written in C ● Saengneung Publishing Company 2019 test program int main ( void ) { ListNode * head = NULL ; // list = 10- &gt; 20- &gt; 30- &gt; 40 _head = insert_last ( head , 20 ) ; head = insert_last ( head , 30 ) ; _head = insert_last ( head , 40 ) ; head = insert_first ( head , 10 ) ; head ) ; print_list ( return 0 ; 10- &gt; 20- &gt; 30- &gt; 40- &gt; Data structure easily written in C ● Saengneung Publisher 2019 View circular linked list data structure with EC vs (multi-line execution) ㅁ Line 52 of cir_list.c If you set a breakpoint and press the [Continue] button three times, the contents (data+link) of the three nodes are displayed in infinite repetition. 08 □ Circular linked list (infinite repetition display) Simple linked list (ends with NULL) head Cal Mend lex 1500 das Moon Scud 20 30 004000325600 Kim 0 D006256001a 2015 K 20 30 and foreadlinke G 20 40 0006256091200615650cm 40 DEDI D20625140000325500 Local Color (CHI-E had › @lik → dela **FIK 10 Inc 20 hood steel 0000cc 5566 (de=2 fin-0x004 :0635 (det. ListNode&quot; 7 Thanks Shindo 3 0x03e-0038 {doux-&quot;Faie-0x03e0030 (det. LaNode&quot; 0x0De: 956E fla:9m2 intm0x0D4:053% (dat... LietNide 2 in 2 HEL self memory thread _0x0Dec0ESC (data=0 fine=0x00020203 IU_ListNode&quot; 0 in Ind El ODDD N gx vs View circular linked list data structure (multiple lines execution) ㅁ Set a breakpoint at line 52 of cir_list.c and press the [Continue] button 3 times. Contents (data + link) of nodes are displayed in infinite repetition □ Circular linked list (displayed in infinite repetition) Simple linked list (terminated by NULL) head hood HEL 40 30 Local gx EC color (CHI-E Thanks Shindo 3 Cal Kim Kang 08 had 0000cc 5566 ( de = 2 fin - 0x004 : 0635 ( det . ListNode &quot; Mend 004000325600 7 0 0x03e - 0038 { doux - &quot; Faie - 0x03e0030 ( det . LaNode &quot; › @lik D006256001a 2015 lex K 0x0De:956E fla:9m2 intm0x0D4:053 % ( dat ... LietNide das 20 2 in N 30 → dela and forreadlinke ** Fik _0x0Dec0ESC ( data = 0 fine = 0x00020203 I U_ListNode &quot; G in Month 0 Ind 20 10 Inc ODDD 0006256091200615650cm 40 2 El 20 20 DEDI 1500 D20625140000325500 characters Memory Thread Scud To VS | insert_last(): 20 ㅁ Set a breakpoint at line 43 of cir_list.c and run it line by line Name edita ht A des Xinx 1 02:5 View zero-linked list data structure (execute line by line) dele head - head = node: da I line cata head 20 Badachis Cannot read Hair remover can be read |0x009d5552 |daz=20km Oxcdc. node-&gt;link= head; 20 0x0C9d5558 (datem.20 E-boxedco 20 lik Data structure easily written in C 20 | 0x000d5563 [dita20fing 0 _C006-J5363 [lola-20 Exc 20 ● Saengneung Publishing Company 2019 head head View as zero linked list data structure ( Execute line by line ) VS insert_last ( ) : 20 | Set and execute line by line Breakpoint at line 43 of cir_list.c ㅁ Name edita 20 ht Badachis Unreadable A des hair remover Readable Xinx 1 02:5 | 0x009d5552 | daz = 20km Oxcdc. node : head = - head 20 dele 20 head 0x0C9d5558 ( datem.20 E - boxedco 20 da I line node- &gt; link = head ; head went 20 cata | 0x000d5563 [ dita20fing head 0 _C006 - J5363 [ lola - 20 Exc lik Data structure easily written in C ● Saengneung Publishing Company 2019 &#39;In VS 「insert_last() : 20, 30 Name dang Bend .de @ink CE D0209de568cate=20 line node- &gt;link = head-&gt;link; data head 10 19 &gt; cabe doo hend da Ink : ink View zero linked list data structure (execute one line at a time) &gt; Int Cine one 30 20 30 2200d5563 d house - head-&gt;link = node; 915 Ham 20084556301 20 (D:200d5562 [d: 30 0095563fd 30 D and received it 20 Ox006d55a0da 50 20 20 20 C-0063534010- 30 0x000d5563 d • Saengneung Publishing Company 2019 head 3 0 30 - head = node; was i dele .head 8 201 10 int nade DOEL 30 30 02-550 30 20 0x009:558011 0x029:55:01: E 0-009.2508144 View zero-linked list data structure with head (execute one line at a time) VS &#39; 30 insert_last () : 20, 「 One name 30 dang - head = node ; head Bend 20 .de 20 @ink D0209de568cate = 20 line i dele 30 node- &gt; link = head- &gt; link ; .head 02-550 30 201 CE 20 30 data 10 int 0x009 : 558011 2200d5563 d head nade 0x029:55:01: cabe house E 20 30 10 20084556301 0-009.2508144 DOEL da 20 ( D: 200d5562 [ d: &gt; Ink 19 head 30 ink 0095563fd 30 8 link = node ; head- &gt; - 915 doo 30 20 30 hend D and received it. Female 20 Ox006d55a0da 50 &gt; Int 0063534010 C - 30 : 0x000d5563 d • Saengneung Publishing Company 2019 Cine Student&gt; Master~ Why do you look at VS? Professor&gt; You can see changes in data structure by executing code line by line with VS. Yes. Student&gt; But VS only shows the values (numbers) of the data structure, so it is difficult to understand. Professor&gt; So, it is easier to understand if you draw a picture of the data structure. Professor In-guk Cheon showed many step-by-step data structure pictures in the textbook, so now you can learn more. The code will be easier to understand if you create the necessary illustrations. head-&gt;link = node; The data structure 2 30, easily written in name dea @hend o ink Ink cat Pink C, was also called. 20 CxCOSd53a01da 50 C-006253004 50 0x000d5563 da 20 ● Saengneung Publishing Company 2019 30 Me? Why do you want to use VS? You can see changes in the data structure by executing code line by line with Student &gt; Professor &gt; VS. Student &gt; But it is difficult to understand because VS only shows the values (numbers) of the data structure. Professor &gt; So it is easier to understand if you draw a picture of the data structure. Professor Cheon In-guk showed many step-by-step data structure diagrams in the textbook, so it will be easier to understand the code if you create the necessary diagrams. head- &gt; link = node ; The name 2 20 30 dea 30 @hend was also called. 20 CxCOSd53a01da ink 50 Ink 006253004 C - o 50 cat 0x000d5563 da Pink Data structure easily explained in C ● Saengneung Publisher 2019 Application of pseudo-linked list: Multiplayer game LO ㅁ Whose turn is currently? |Current turn=KIM |Current turn=CH Current turn=PARK Current turn=KIM Current turn=CH Current turn=PARK Current turn=KIM Current turn = CHOI Current turn=PARK Current turn=KIM Data structure easily expressed in C ● Saengneung Publishing Company 2019 S Application of linked list: multiplayer game LO? Who is the current turn ㅁ | Current turn = KIM | Current turn = CHI Current turn = PARK Current turn = KIM Current turn = CHI Current turn = PARK Current turn = KIM Current turn = CHOI Current turn = PARK Current turn = KIM Data structure easily translated into SC ● Saengneung Publisher 2019 #include<stdio.h> #include<stdlib.h> #include<string.h> typedef char element [100]; typedef struct ListNode { element data; struct ListNode &quot;link; } ListNode; //Node type ListNode* insert_first (ListNode* head, element data) { ListNode *node = (ListNode *)malloc(sizeof (ListNode)); strcpy(node-&gt;data, data); if (head == NULL) { } else { head = node; node-&gt;link= head; node-&gt;link= head-&gt;link; head-&gt;link = node; } return head; // (1) // (2) // Returns the changed head pointer #include &lt; stdio.h &gt; #include &lt; stdlib.h &gt; #include &lt; string.h &gt; typedef char element [ 100 ] ; // Node type typedef struct ListNode { element data ; struct ListNode &quot; link ; } ListNode ; ListNode * insert_first ( ListNode * head , element data ) { ListNode * node = ( ListNode * ) malloc ( sizeof ( ListNode ) ) ; strcpy ( node - &gt; data , data ) ; if ( head == NULL ) { head = node ; node- &gt; link = head ; } else { node- &gt; link = head- &gt; link ; // (1) head- &gt; link = node ; // (2) } // Returns the changed head pointer. return head ; &#39;Multiplayer game (3 people repeat infinitely in a circle) ㄹ // Circular linked list test program - int main (void) { ListNode *head = NULL; head = insert_first(head, &quot;KIM&quot;); _head = insert_first(head, &quot;PARK&quot;); head = insert_first(head, &quot;CHOI&quot;); for (int i = 0; i &lt; 10; i++) { ListNode* p = head; printf(&quot;Current turn=%s\n&quot;, p-&gt;data); _p = p-&gt;link; } return 0; Data structure easily written in C ● Saengneung Publishing Company 2019 &#39;Multiplayer game (3 people repeat infinitely in a circle) ㄹ // Circular linked list test program - int main (void) { ListNode * head = NULL; head = insert_first ( head , &quot; KIM &quot; ) ; _head = insert_first ( head , &quot; PARK &quot; ) ; head = insert_first ( head , &quot; CHOI &quot; ) ; ListNode * p = head ; for ( int i = 0 ; i &lt; 10 ; i ++ ) { printf ( &quot; current turn = % s \ n &quot; , p- &gt; data ) ; link ; _p = p- &gt; } return 0 ; Data structure easily written in C ● Saengneung Publishing Company 2019 &lt;Student&gt; Go Soo~ warning aom It&#39;s a new year 1. Click on strcpy() and add F1 2.string.h 3. Change strcpy_s () 4. Click on strcpy_s() After doing F1 5.strcpy_s(node-&gt;data, _countof(node-&gt;data), data); Change Professor&gt; Yay~ warning 0 Data structure easily written in C ● Saengneung Publishing Company 2019 &lt;Student&gt; Go Soo, Happy New Year ~ warning After aom, click F1 ( ) 1. Add strcpy 2. Change string.h ( ) 3. strcpy_s After F1 clicked ( ) in 4.strcpy_s 5.strcpy_s ( node- &gt; data , _countof ( node- &gt; data ) , data ) ; Change Professor &gt; Yay ~ warning 0 Data structure easily written in C ● Saengneung Publishing Company 2019 Knowledge 1. I can implement a list data structure as a circular linked list 2. I can implement a list data structure as a doubly linked list. 3.I can implement the stack data structure as a linked list. 4. I can implement the queue data structure as a linked list. A data structure easily written in C. ● Saengneung Publishing Company 2019 Knowledge 1. I can implement the list data structure as a circular linked list. 2. I can implement the list data structure as a doubly linked list. It can be implemented. 3. I can implement the stack data structure as a linked list. 4. I can implement the queue data structure as a linked list. A data structure easily written in C. ● Saengneung Publisher 2019 Lee Joo-gyeo List &#39;8 LE - Problem with simple linked list: It is difficult to find the preceding node. Finding the preceding node is also difficult in a circular linked list. Difficult head o Data structure easily explained in C 10 What is my preceding node? 4.201. 20 ● Saengneung Publishing Company 2019 head 30 *** NULL List Migration &#39; 8 LE - Problem with simple linked list: It is difficult to find the preceding node It is difficult to find the preceding node in the circular linked list as well What is my preceding node? head o NULL *** head 4.201 . 10 30 20 Data structure easily written in C ● Saengneung Publisher 2019 Aiju List here &#39;8 LE Doubly linked list: A list in which one node has two links to the predecessor node and the successor node - The disadvantage is that it takes up a lot of space and code Complex headnode Data structure easily written in C ● Saengneung Publishing Company 2019 Aiju here List &#39;8 LE Doubly linked list: A list in which one node has two links to the preceding node and the succeeding node - The disadvantage is that it takes up a lot of space. Head node with complex code Data structure easily written in C ● Saengneung Publisher 2019 Head node ㅁHead node: A node that does not contain data but was created for the purpose of simplifying insertion and deletion code. ㅁNeeds to be distinguished from the head pointer ■ In a blank state, only the head node exists. Head node Data structure easily written in C ● Saengneung Publishing Company 2019 f Head node ㅁ Head node: A distinction between nodes created for the purpose of simplifying insertion and deletion codes without holding data. Required head pointer and ㅁ ■ In an empty state, only the head node exists. Data structure easily interpreted as head node f C ● Saengneung Publisher 2019 Node structure ㅁ Node structure in a doubly linked list typedef int element; typedef struct DlistNode { element data; struct DlistNode *lllink; struct DlistNode *rlink; )DlistNode; Data structure easily written in C ● Saengneung Publishing Company 2019 Node structure ㅁ Node structure in a doubly linked list element; typedef int typedef struct DlistNode { element data ; struct DlistNode * llink ; struct DlistNode * rlink ; ) DlistNode ; Data structure easily written in C ● Saengneung Publisher 2019 Saiyosa HULL before new mode c_node // Insert new data to the right of the node before. void dinsert(DListNode *before, element data) { DListNode *newnode - (DListNode *)malloc(sizeof(DListNode)); strcpy(newnode-&gt;data, data); _newnode-&gt;llink = before; // (1) _newnode-&gt;rlink = before-&gt;rlink; // (2) Data structure easily written in C before-&gt;rlink-&gt;lllink = newnode; // (3} before-&gt;rlink = newnode; // (4) ● Saengneung Publishing Company 2019 Ms. Sai HULL before c_node mode new // Insert new data to the right of the node before. void dinsert (DListNode * before, element data ) { DListNode * newnode - ( DListNode * ) malloc ( sizeof ( DListNode ) ) ; strcpy ( newnode- &gt; data , data ) ; _newnode- &gt; llink = before ; // ( 1 ) _newnode- &gt; rlink = before- &gt; rlink ; // ( 2 ) before- &gt; rlink- &gt; llink = newnode ; // ( 3 } before- &gt; rlink = newnode ; // ( 4 ) Data structure easily translated in C ● Saengneung Publishing Company 2019 Article Jeje Arithmetic 1 LI removed 0 Data structure easily written in C (2) // Delete the node removed. | void ddelete(DListNode* head, DListNode&quot; removed) { if (removed == head) return; removed-&gt;llink-&gt;rlink = removed- &gt;rlink; // (1) _removed-&gt;rlink-&gt;llink = removed-&gt;llink; // (2) free(removed); ● Saengneung Publishing Company 2019 article first operation 1 LI 0 ( 2 ) removed // node removed Delete . | void ddelete ( DListNode * head , DListNode &quot; removed ) { if ( removed == head ) return ; removed- &gt; llink- &gt; rlink = removed- &gt; rlink ; // ( 1 ) _removed- &gt; rlink- &gt; llink = removed- &gt; llink ; // ( 2 ) free ( removed ) ; Data structure easily written in C ● Saengneung Publisher 2019 test program | #include<stdio.h> | #include<stdlib.h> typedef int element; typedef struct DListNode { // Dual connection node type element data; struct DListNode&quot; llink; struct DListNode&quot; rlink; | DListNode; // Initialize a doubly linked list void init(DListNode* phead) { _phead-&gt;llink = phead; _phead-&gt;rlink = phead; Data structure easily written in C ● Saengneung Publishing Company 2019 Yes Test Pro | #include &lt; stdio.h &gt; | #include &lt; stdlib.h &gt; typedef int element ; Connection node type typedef struct DListNode { // double element data ; struct DListNode &quot; llink ; struct DListNode &quot; rlink ; | DListNode ; // Initialize a doubly linked list void init (DListNode * phead) { _phead- &gt; llink = phead; _phead- &gt; rlink = phead ; Data structure easily written in C ● Saengneung Publisher 2019 test program // Print the nodes of a doubly linked list | void print_dlist(DListNode* phead) { DListNode* p; for (p = phead-&gt;rlink; p != phead; p = p-&gt;rlink) { _printf(&quot;&lt;- 1 1%d| |-&gt;&#39;, p-&gt;data); } printf(&quot;\n&quot; ); |} // Insert new data to the right of the node before void dinsert(DListNode *before, element data) { DListNode *newmode = (DListNode *)malloc(sizeof(DListNode)); strcpy(newnode-&gt;data , data); _newnode-&gt;llink = before; newnode-&gt;rlink = before-&gt;rlink; before-&gt;rlink-&gt;llink = newnode; before-&gt;rlink = newnode; Data structure easily written in C ● Saengneung Publishing Company 2019 Yes Test Pro // Print the nodes of the doubly linked list | void print_dlist ( DListNode * phead ) { DListNode * p ; for ( p = phead- &gt; rlink ; p ! = phead ; p = p- &gt; rlink ) { _printf ( &quot; &lt; - 1 1 % d | | - &gt; &#39; , p- &gt; data ) ; } printf ( &quot; \ n &quot; ) ; } | // Insert new data to the right of the node before. void dinsert ( DListNode * before , element data ) { DListNode * newmode = ( DListNode * ) malloc ( sizeof ( DListNode ) ) ; strcpy ( newnode- &gt; data , data ) ; _newnode- &gt; llink = before ; newnode- &gt; rlink = before- &gt; rlink ; before- &gt; rlink- &gt; llink newnode = ; before- &gt; rlink newnode = ; Saengneung Publishing Company 2019 Data structure easily explained in C ● Test program // Delete the node removed. | void ddelete(DListNode&quot; head, DListNode* removed) { if (removed == head) return; removed-&gt;llink-&gt;rlink = removed-&gt;rlink; _removed-&gt;rlink-&gt;llink = removed-&gt;llink; free (removed ); Data structure easily written in C ● Saengneung Publisher 2019 Yes Test Pro // Delete the node removed. | void ddelete ( DListNode &quot; head , DListNode * removed ) { if ( removed == head ) return ; removed- &gt; llink- &gt; rlink = removed- &gt; rlink ; _removed- &gt; rlink- &gt; llink = removed- &gt; llink ; free ( removed ) ; Data structure easily written in C ● Saengneung Publisher 2019 test program // doubly linked list test program int main(void) { DListNode&quot; head = (DListNode*)malloc(sizeof(DListNode)); init(head); printf( &quot;Add step\n&quot;); for (int i = 0; i &lt; 5; i++) { // Insert to the right of the head node dinsert(head, i); print_dlist(head); } printf(&quot;\nDelete step \n&quot;); for (int i = 0; i &lt; 5; i++){ Data structure easily written in C _print_dlist(head); ddelete(head, head-&gt;rlink); } free(head); return 0; ● Saengneung Publishing Company 2019 Yes Test Pro // Doubly linked list test program int main ( void ) { DListNode &quot; head = ( DListNode * ) malloc ( sizeof ( DListNode ) ) ; init(head); printf ( &quot; Additional steps \ n &quot; ) ; for (int i = 0; i &lt; 5; i++) { // insert to the right of the head node dinsert (head, i); print_dlist(head); } ; printf ( &quot; \n Delete step \ n &quot; ) for ( int i = 0 ; i &lt; 5 ; i ++ ) { _print_dlist ( head ) ; ddelete (head, head-&gt;rlink); } free ( head ) ; return 0 ; Data structure written in C ● Saengneung Publishing Company 2019 execution results Professor~ The result screen is strange) ( | Additional steps &lt;-|10| |-&gt; &lt;-||1||-→-| 10| |-→&gt; &lt;- 12| |-&gt; &lt;-||1| |-&gt; &lt;-||0| |-&gt; &lt;- 13| |-&gt; &lt;- 12| |-&gt; &lt;-||1| |-&gt; &lt;- ||0| |-&gt; &lt;- 14| |-&lt;-| |3| |-&gt; &lt;-| |2| |→&lt;-| |1| |-→&gt; &lt;-| 10| |-&gt; Deletion Step &lt;- 14| |-- |3| |-&lt;-| |2| |-&lt;- |1| |-&gt; &lt;-||0|| |-&gt; &lt;-| |3| |-&gt; &lt;- 12 | |-&gt; &lt;-||1| |-&gt; &lt;-| 10| |-&gt; &lt;- 12| |-&gt; &lt;-||1| |-&gt; &lt;-||0| |-&gt; &lt;-|| 1| |-&gt; &lt;-||0| |-→ &lt;-| 10| |-&gt; C:\WINDOWS\system32\cmd.exe Stock Price Step Press any key to continue.. Data structure easily written in C ● Saengneung Publishing Company 2019 execution results Professor ~ The result screen is strange) ( | Additional steps &lt; - | 10 | | - &gt; &lt; - || 1 || - → - | 10 | | - → &gt; &lt; - 12 | | - &gt; &lt; - || 1 | | - &gt; &lt; - || 0 | | - &gt; &lt; - 13 | | - &gt; &lt; - 12 | | - &gt; &lt; - || 1 | | - &gt; &lt; - || 0 | | - &gt; &lt; - 14 | | - &lt; - | | 3 | | - &gt; &lt; - | | 2 | | | → &lt; - | | 1 | | - → &gt; &lt; - | 10 | 3 | | - &lt; - | | 2 | | - &lt; - | 1 | | - &gt; &lt; - || 0 || | - &gt; &lt; - | | 3 | | - &gt; &lt; - 12 | | - &gt; &lt; - || 1 | | - &gt; &lt; - | 10 | | - &gt; &lt; - 12 | | - &gt; &lt; - || 1 | | - &gt; &lt; - || 0 | | - &gt; &lt; - || 1 | | - &gt; &lt; - | | 0 | | - → &lt; - | 10 | | -&gt; C:\WINDOWS\system32\cmd.exe Stock Price Step Press any key to continue.. Data structure easily expressed in C ● Saengneung Publishing Company 2019 Student&gt; Professor~ The result screen is strange 1. The data is of int type, so strcpy () should not be used 2. As shown on page 234 of the textbook, newnode-&gt;data = data; Data structure easily written in C ● Saengneung Publishing Company 2019 Student &gt; Professor ~ The result screen is strange 1. Data is an int type, so strcpy () should not be used 2. As shown on page 234 of the textbook, newnode- &gt; data = data; Data structure easily written in C ● Saengneung Publishing Company 2019 ㅁ Picture-style Java applet vs. (Data structure drawing drawn by a student) and VS 348 07 C Double linked list Java applet K ** 10 C 80-4 noge Los Go Data structure easily written in C 4000 nikinnabelificetente 2 b b da ● Saengneung Publishing Company 2019 &lt;Operation&gt; ㅁdinsert (DListNode *before, element data) ㅁ head, ddelete(DListNode* DListNode* removed) &lt;Data structure&gt; typedef struct DListNode { element data; struct DListNode&#39; llink; struct DListNode&#39; rlink; } DListNode; Doubly linked list Java applet ㅁ Java applet vs. picture method. (Data structure drawing drawn by a student) and VS operations &gt; &lt; nikinnabelificetente ㅁ dinsert ( DListNode * before , da element data ) bb ㅁ head , ddelete ( DListNode * 2 DListNode * removed ) &lt; Data structure &gt; DListNode { typedef struct element data ; struct DListNode &#39; llink ; C high 348 07 struct DListNode &#39; rlink ; 10 K } DListNode ; ** C 80-4 noge Los 4000 Data structure easily written in C ● Saengneung Publisher 2019 ㅁ View doubly linked list data structure with VS (multi-line execution) Set a breakpoint on line 36 and press the [Continue] button 3 times. Contents of nodes The name (data+link) of dlinkedlist.c is displayed in infinite repetition ㅁ Doubly linked list (infinite repetition display, left link, right link) Simple linked list (terminated by NULL) Redis bele at 1 inc @rink link tink volid. tick dong 10 t @cate 19 fine 4 rink Kim | 5067906000--342150451- ink › dink VI LEVENTE -61215215 0x00795688 satz=0 fine=0x00735 2 _DSC07966COinata=-3(2:50151 | 0x00796-463 [data= 1 | ink=0x0079 8 1 _DSC07902 (dete-214-0300795 000796658icata= 0 ince0o02735 0 Ok 0x00790600-le--34220451 -81215215 C00795658=0=0x0735 2 0x00796600-catam-342:501511 inl 2007963 dtalink000 search (CI-E had data › @lik . .: → dela 10 Inc 20 hood 10 p. Kim Sashindo 3 lectures 0000cc 5566 (de=2 fin-0x004:0635 (det. ListNode&quot; 7 0x03e-0038 {doux-&quot;Faie-0x03e0030 (det. LaNode&quot; 0x0De: 956E fla:9m2 intm0x0D4:053% (dat.. . LietNide 2 in 2 32 NULL character memory thread _0x0Dec0ESC (data=0 fine=0x00020203 IU_ListNode&quot; 0 in Ind El ODDD N gx) View (Multi-line execution list data structure Double connection with VS ㅁ Set a breakpoint on line 36 and [ [Continue] button 3 times, the contents of 3 nodes are displayed repeatedly data + link) becomes infinite (double linked list (infinite repetition display, left link, right link) simple linked list (terminated by NULL) redis hood 10 32 NULL Name Kim 5067906000--342150451 | bele -61215215 gx at 0x00795688 satz = 0 fine = 0x00735 1 inc Four Gods 3 Search ( CI - E . Kim p @rink Kang 2 0000cc 5566 ( de = 2 fin - 0x004 : 0635 ( det. ListNode &quot; link _DSC07966COinata = -3 ( 2 : 50151 had tink data 7 | 0x00796-463 [ data = 1 | ink = 0x00798 0x03e - 0038 { doux- &quot; Faie - 0x03e0030 ( det . LaNode &quot; › @lik 1 _DSC07902 (dete- 214-0300795 .. : 0x0De : 956E fla : 9m2 intm0x0D4 : 053 % ( dat ... LietNide volid 2 in 000796658icata = 0 ince0o02735 . tick N 0 dong → dela 10 t Ok 0x00790600 - le -- 34220 451 _0x0Dec0ESC ( data = 0 fine = 0x00020203 IU_ListNode &quot; in 0 @cate -81215215 Ind 19 fine C00795658 = 0 = 0x0735 10 Inc ODDD 2 El 20 rink 4 2 ink 0x00796600 - catam - 342:501511 inl 2007963 dtalink 000 › Dual connection with dink thread memory ruler VI LEVENTE VS View list data structure &lt;Execute each line LE 12 Idinsert() : 0 Set breakpoint at line 31 of dlinkedlist.c Headnode name before volid 000 5000 de 000cc560041 newnode-&gt;data = data; newrode da:3 l date 0 10 Ox o_newnode-&gt;llink = before; before Cx005600 mode cata inc brink befor: # 10x00cc5600405 344451 10 link Cat nende Jale 10 link rink 0.04. NET De00cc5620 in seeded newnode-&gt;rlink = before-&gt;rlink; 0x00kc5600 headnode 3415 47 O 0.00 76388 - C 0:00k,2000-111 0x00kc5650:5 0 0 0x00kc5650-51 0x00cc5600 (nik headnode ● Saengneung Publishing Company 2019 0 Run line by line &lt; Ha Structure View Data Linked List Double VS With LE 12 Set breakpoint on line 31 Idinsert ( ) : 0 Head node name in dlinkedlist.c # before 10x00cc5600405 344451 volid 000 5000 de 000cc560041 newnode- &gt; data = data ; newrode 0.04 . This da : 3 0 10 Ox ; llink = before o_newnode- &gt; Cx005600 before headnode l date O mode 0.00 76388 C cata inc De00cc5620 in brink seeded newnode- &gt; rlink = before- &gt; rlink ; Head node befor : 0x00kc5600 341547 10 link : 00k , 2000-111 0 0 0x00kc5650 : 5 0 Cat nende 0 Jale 0x00kc5650-51 10 link rink 0x00cc5600 ( nik ● Saengneung Publisher 2019 Doubly linked list with NET VS View data structure &lt;Hazum Sisi Hi (execute one line at a time) dinsert() : 0 newnode-&gt;rlink = before-&gt;rlink; Headnode 0x00kc2000jj -4215215 0x00cc56006 Lofure data link @rink a cale O reanoze data link dink be ● Data + link 1 before-&gt;rlink- &gt;llink = newnode; Detokk06001 -34215215 0x0c658 &gt; link betore 0 0x00cc56680 data 11 mode before-&gt;rlink = newnode; Itine dele 0x00x200014- CC05600 -042153451 0x00cc658 0x00cc5600: 2 0 0100kc06881 new ode Simple explanation in C cl -$4150/51 0 :00cc5638 16 0 00:20cc563816 ● Saengneung Publishing Co., Ltd. 2019 Headnode Headnode View &lt;Structural data list) Double connection Each execution in one line (VS 0 dinsert (): newnode-&gt;rlink = before-&gt;rlink; head Node 0x00kc2000jj Lofure this data -4215215 0x00cc56006 link @rink a cale 0 O reanoze 0x00cc56680 data 11 link 0x00x200014 dink CC05600 newnode ; before- &gt; rlink- &gt; llink = head node Detokk06001 be ● Data -3421521 5 + link 0x0c658 -042153451 0x00cc658 link &gt; 0x00cc5600 : 20 0100kc06881 mode before- &gt; rlink = newnode ; Head node betore cl $ 4150 / 51 data - 0 : 00cc5638 16 1 Itine dele 0 00 : 20cc563816 new ode ● Saengneung Publishing Company 2019 Viewing doubly linked list data structure with &#39;vs&#39; easily explained in C (DListNode) dinsert (DListNode *before, element data) 1. newnode-&gt;llink = before; 2. newnode-&gt;rlink = before.rlink; 3. before-&gt;rlink-&gt;llink = newnode 4. before-&gt;rlink = newnode; Why did you use before-&gt;rlink-&gt;llink instead of before-&gt;llink in step 3? (There are two -&gt;) &lt;Program 7.7&gt; dinsert (head, 0); dinsert(head, 1); Headnode Data structure easily written in C Headnode &lt;insert on the right side of before&gt; before ● Saengneung Publishing Company 2019 new_node (3) &#39;View doubly linked list data structure with vs (execute one line at a time) dinsert (DListNode * before, element data) 1. newnode- &gt; llink = before ; &lt;insert on the right side of before&gt; 2. newnode-&gt;rlink = before.rlink; before 3. before- &gt; rlink- &gt; llink = newnode 4. before- &gt; rlink = newnode ; Why did you choose (3) before-&gt;rlink-&gt;llink instead of before-&gt;llink in step 3? (There are two - &gt; ) new_node Node program 7.7 &gt; Head &lt; dinsert ( head , 0 ) ; dinsert ( head , 1 ) ; Data structure easily explained with head node C ● View doubly linked list data structure with Saengneung Publisher 2019 vs (execute line by line) | ddelete(DListNode* head, DListNode* removed) 1. removed-&gt;lllink-&gt;rlink = removed-&gt;rlink; 2.removed-&gt;rlink-&gt;llink = removed-&gt;llink; (There are two -&gt;) Difficult to understand with only C code without pictures &lt;Program 7.7&gt; ddelete (head, head-&gt;rlink); 11Remove Ddelete (head, head-&gt;rlink); 110 Remove headnode<head의 오른쪽 delete > Data structure easily written in C ● Saengneung Publishing Company 2019 renovated View doubly linked list data structure with f vs (execute line by line) | ddelete ( DListNode * head , DListNode * removed ) &lt; right side of head delete &gt; 1. removed- &gt; llink- &gt; rlink = removed- &gt; rlink ; 2.removed- &gt; rlink- &gt; llink = removed- &gt; llink ; (There are two - &gt;) Difficult to understand with only C code without pictures renovated &lt;Program 7.7&gt; ddelete (head, head-&gt;rlink); 11 remove Ddelete ( head , head- &gt; rlink ) ; 110 Removal Head Node Data structure easily written with f C ● Saengneung Publisher 2019 Rest (Now I can do it) 1. I can implement the list data structure as a circular linked list 2. I can implement the list data structure as a doubly linked list You can. 3. I can show changes in the content of circularly linked lists and doubly linked lists line by line of C code using VS and data structure diagrams I drew. Headnode Headnode 0 4. I can implement the stack data structure as a linked list. 5. I can implement the queue data structure as a linked list. Data structure easily written in C ● Saengneung Publishing Company 2019 Rest (Now I can do it) 1. I can implement the list data structure as a circular linked list 2. I can implement the list data structure as a doubly linked list. 3. I can show changes in the content of circular linked lists and doubly linked lists line by line of C code using VS and the data structure diagram I drew. Head Node Head Node 0 4. I can implement the stack data structure as a linked list. 5. I can implement the queue data structure as a linked list. Data structure easily written in C ● Saengneung Publisher 2019 Creating a Cmp3 playback program (double linked list) Music 6 0 0 | &lt;-I #Fernando# |-&gt; &lt;- | Dancing Queen |-&gt; &lt;-1 Mamamia |-&gt; Enter the command (&lt;, &gt;, q): &gt; &lt;-1 Fernando | -&gt; &lt;- | #Dancing Queen# |-&gt; &lt;- Mamamia |-&gt; Music 3 Enter the command (&lt;, &gt;, q): &gt; | &lt;-1 Fernando |-&gt; &lt;- | Dancing Queen |-&gt; &lt;- #Mamamia# |-&gt; Enter the command (&lt;, &gt;, q): &lt; &lt;-| Fernando |-&gt; &lt;- | #Dancing Queen# |-&gt; &lt;- Mamamia |-&gt; Enter the command (&lt;, &gt;, q): Data structure easily written in C ● Saengneung Publishing Company 2019 Linked list) Create double (Program play Cmp3 0 0 Music 6 Music 3 | &lt; -I # Fernando # | - &gt; &lt; - | Dancing Queen | - &gt; &lt; -1 Mamamia | - &gt; Enter the command (&lt;, &gt;, q): &gt; &lt; -1 Fernando | - &gt; &lt; - | # Enter the Dancing Queen # | - &gt; &lt; - Mamamia | - &gt; command ( &lt; , &gt; , q ) : &gt; | &lt; -1 Fernando | - &gt; &lt; - | Dancing Queen | - &gt; &lt; - # Mamamia # | - &gt; Command Enter the command ( &lt; , &gt; , q ) : &lt; &lt; - | Fernando | - &gt; &lt; - | #Dancing Queen # | - &gt; &lt; - Mamamia | Data structure easily written in C ● Student&gt; Professor~ Is there an error? Student&gt; I fixed strcpy_s() in Chapter 7 multigame.c, so now I can fix it. 1. strcpy_s(newnode-&gt;data, _countof(newnode-&gt;data) , data); Change Data structure easily written in C ● Saengneung Publishing Co., Ltd. 2019 f I got an error ~ Professor and student &gt; I corrected strcpy_s (), so now I can fix it in student &gt; Chapter 7 multigame.c. 1. strcpy_s (newnode-&gt; data , _countof ( newnode- &gt; data ) , data ) ; change f Data structure easily written in C ● Saengneung Publisher 2019 test program | #include<stdio.h> | #include<stdlib.h> | #include<string.h> typedef char element[100]; typedef struct DListNode { // Dual connected node type element data; struct DListNode* Ilink; struct DListNode* rlink; | } DListNode; DListNode*current; // Initialize a doubly linked list void init (DListNode* phead) { _phead-&gt;llink = phead; phead-&gt;rlink = phead; Data structure easily written in C ● Saengneung Publishing Company 2019 test program | #include &lt; stdio.h &gt; #include &lt; stdlib.h &gt; | | #include &lt; string.h &gt; typedef char element [ 100 ] ; Double connected node type typedef struct DListNode { // element data ; struct DListNode * Ilink ; struct DListNode * rlink ; | } DListNode ; DListNode * current ; // Initialize a doubly linked list void init (DListNode * phead) { _phead- &gt; llink = phead; phead - &gt; rlink = phead ; Data structure easily written in C ● Saengneung Publisher 2019 test program // doubly linked list test program int main(void) { char ch; DListNode* head = (DListNode*)malloc(sizeof(DListNode)); init(head); dinsert(head, &quot;Mamamia&quot;); dinsert(head, &quot;Dancing Queen&quot;); dinsert(head, &quot;Fernando&quot;); current = head-&gt;rlink; print_dlist(head); Data structure easily written in C ● Saengneung Publishing Company 2019 Yes Test Pro // Doubly linked list test program int main (void) { char ch; DListNode * head = ( DListNode * ) malloc ( sizeof ( DListNode ) ) ; init(head); dinsert ( head , &quot; Mamamia &quot; ) ; dinsert ( head , &quot; Dancing Queen &quot; ) ; dinsert ( head , &quot; Fernando &quot; ) ; current = head- &gt; rlink ; print_dlist(head); Data structure easily written in C ● Saengneung Publisher 2019 Headnode do { printf(&quot;\nEnter the command (&lt;, &gt;, q): &quot;); ch = getchar(); if (ch == &#39;&lt;&#39;) { G } else if (ch == &#39;&gt;&#39;) { } _current = current-&gt;lllink; if (current == head) // Professor - Why is this line there? _current = current-&gt;llink; _current = current-&gt;rlink; if (current == head) // Professor - Why is this line there? current = current-&gt;rlink; print_dlist(head); getchar(); } while (ch != &#39;q&#39;); // Dynamic memory release code here (delete step of dlinkedlist.c) |} Reference source written easily in C 0 Jeongneung Publishing Company 2019 Head node G do { printf (&quot;\nEnter the command (&lt; , &gt; , q ) : &quot; ) ; getchar ch = ( ) ; if ( ch == &#39; &lt; &#39; ) { _current = current- &gt; llink ; Professor - Why is this line there? if ( current == head ) // current- &gt; llink ; _current = } else if ( ch == &#39; &gt; &#39; ) { rlink ; _current = current- &gt; if (current == head) // Professor - Why is this line there? current = current- &gt; rlink ; } print_dlist ( head ) ; getchar ( ) ; } while ( ch ! = &#39; q &#39; ) ; // Dynamic memory release code here (delete step in dlinkedlist.c) | } Jeongneung Publishing Company 2019 C also easily explained and written data Guso 0 Professor&gt; It is impossible to explain the code without data structure pictures. Professor&gt; If the code is strange, you can draw a picture of the data structure. Headnode do { ر ر ر ر Data structure easily written in C printf(&quot;\nEnter the command (&lt;, &gt;, q): &quot;); ch = getchar(); if (ch == &#39;&lt;&#39;) { } current = current-&gt;lllink; if (current == head) // Professor, why is this line there? current = current-&gt;llink; ● Saengneung Publishing 2019 Professor &gt; Data structure It is impossible to explain the code without pictures. Professor &gt; If the code is strange, you can draw a picture of the data structure. Head node ر ر ر ر do { printf ( &quot;\nEnter the command (&lt;, &gt;, q): &quot;); ch = getchar ( ) ; if ( ch == &#39; &lt; &#39; ) { current = current- &gt; llink ; if (current == head) // Professor ~ Why is this line there? current = current- &gt; llink ; } Data structure easily written in C ● Saengneung Publishing Company 2019 Stack implemented as a linked list (simple linked list) Student&gt; Professor~ I got the idea after looking at the picture. ㅁ Stack: Last-In First-Out (LIFO): The most recently entered data is the first to go out. If you do not use the stack data structure in the maze escape problem, you cannot escape the maze. Infinite repetition (please save me~~) 3 2 1 D 9 7 3 (a) Stack using array Data structure easily written in C top ● Saengneung Publishing Company 2019 FEE 9 7 3 NULL -top (6) Connecting in-laws using linked list Stack implemented as a list (simple linked list) Student &gt; Professor ~ I got the idea after looking at the picture. ㅁ Stack: Last-In First-Out (LIFO: Last-In First-Out): The most recently entered data is the first to go out. If you do not use the stack data structure in the maze escape problem, it is impossible to escape the maze. Infinite repetition (please save me ~~) FEE -top 9 3 top 9 2 7 7 1 3 NULL 3 D (6) In-laws using linked lists (a) Stack using arrays Data structure easily written in C ● Saengneung Publisher 2019 typedef int element; typedef struct StackNode { element data; struct StackNode *link; )StackNode; typedef struct { StackNode *top; } LinkedStackType; Data structure easily written in C ● Saengneung Publishing Company 2019 f typedef int element; typedef struct StackNode { element data ; struct StackNode * link ; )StackNode ; typedef struct { StackNode * top ; } LinkedStackType ; Data structure easily written in f C ● Saengneung Publishing Company 2019 Ms. Sai HH LL 8 temp. Data structure easily written in C C D B ● Saengneung Publishing Company 2019 A NULL f Ms. HH LL CBA NULL 8 temp. D f C Data structure easily interpreted with C ● Saengneung Publishing Company 2019 private calculation LL top temp Data structure easily interpreted with C ++ B ● Saengneung Publishing Company 2019 A NULL Private calculation LL top ++ CBA NULL temp Data easily interpreted with C Structure ● Saengneung Publisher 2019 #include<stdio.h> #include<malloc.h> typedef int element; typedef struct StackNode { element data; struct StackNode &quot;link; } StackNode; typedef struct { StackNode *top; } LinkedStackType; // initialization function void init (LinkedStackType *s) { s-&gt;top = NULL; Data structure easily written in C ● Saengneung Publishing Company 2019 #include &lt; stdio.h &gt; malloc.h &gt; #include &lt; typedef int element ; typedef struct StackNode { element data ; struct StackNode &quot; link ; StackNode ; } typedef struct { StackNode * top ; } LinkedStackType ; // Initialization function LinkedStackType void init ( * s ) { ; s- &gt; top = NULL Data structure easily written in C ● Saengneung Publisher 2019 // Empty state detection function int is_empty(LinkedStackType &#39;s) { return (s-&gt;top== NULL): } // Saturation state detection function int is full (LinkedStackTy! { return 0; |} top temp // insert function void push (LinkedStackType *s, element item) { D D} void print_stack(LinkedStackType *s) { StackNode *temp = (StackNode *)malloc(sizeof ( StackNode)); temp-&gt;data = item; temp-&gt;link = s-&gt;top; (1) s-&gt;top = temp; (2) Data structure B easily written in C for (StackNode *p=s- &gt; top; p != NULL; p = p-&gt;link) printf(&quot;%d-&gt;&quot;, p-&gt;data); printf(&quot;NULL \n&quot;); ● Saengneung Publishing Company 2019 A NULL // Detect blank state Function int is_empty ( LinkedStackType &#39; s ) { == NULL ) : return ( s- &gt; top } // Saturation detection function top BA NULL int is full ( LinkedStackTy ! { return 0 ; } | D temp // Insertion function void push ( LinkedStackType * s , element item ) { StackNode * temp = ( StackNode * ) malloc ( sizeof ( StackNode ) ) ; temp- &gt; data = item ; temp- &gt; link = s- &gt; top ; ( 1 ) s- &gt; top = temp ; ( 2 ) D } void print_stack ( LinkedStackType * s ) { for ( StackNode * p = s- &gt; top ; p ! = NULL ; p = p- &gt; link ) printf ( &quot; % d- &gt; &quot; , p- &gt; data ) ; printf(&quot;NULL\n&quot;); Data structure easily written in C ● Saengneung Publisher 2019 top temp // Delete function element pop (LinkedStackType *s) { if (is_empty(s)) { } else { B } fprintf(stderr, &quot;OI exit(1); StackNode *temps-&gt; top; int data = temp-&gt;data; s-&gt;top=s-&gt;top-&gt;link; (1) free (temp); return data; A MULL top BA MULL temp // Delete function element pop ( LinkedStackType * s ) { if ( is_empty ( s ) ) { fprintf ( stderr , &quot; OI exit ( 1 ) ; } else { StackNode temps- * &gt; top ; int data = temp- &gt; data ; s- &gt; top = s- &gt; top- &gt; link ; ( 1 ) free ( temp ) ; return data ; } // Main function int main(void) { LinkedStackTypes; init(&amp;s); push (&amp;s, 1); print_stack(s); push(&amp;s , 2); print_stack(s); push(&amp;s, 3); print_stack(s); pop(s); print_stack(s); pop(s); print_stack(s); pop(s); print_stack(s) ; return 0; 1-&gt; NULL 2-&gt;1-&gt;NULL 3-&gt;2-&gt;1-&gt;NULL 2-&gt;1-&gt;NULL 1-&gt; NULL NULL C is also easily reduced historical data structure 6 Seongdong Publishing Company 2019 // Note Function int main ( void ) { LinkedStackTypes ; init ( &amp; s ) ; push ( &amp; s , 1 ) ; print_stack ( s ) ; push ( &amp; s , 2 ) ; print_stack ( s ) ; push ( &amp; s , 3 ) ; print_stack ( s ) ; pop ( s ) ; print_stack(s); print_stack(s); pop(s); print_stack(s); pop(s); return 0 ; 1- &gt; NULL 2- &gt; 1- &gt; NULL 3- &gt; 2- &gt; 1- &gt; NULL 2- &gt; 1- &gt; NULL 1- &gt; NULL NULL Seongdong Publishing Company 2019 C Easily reduced data structure 6 ㅁ Picture type Java applet vs. . Text-based VS debugging Sees data structures and algorithms simultaneously as a unit Main connected stack Java applet + 278 -2 73 28 &lt;400 C 2 182- n- Data structure easily expressed in C Connected stack helleh } ext 1 -- 02- ● Saengneung Publishing Company 2019 &lt;Operation&gt; o void push(LinkedStackType *s, element item) element pop(LinkedStackType *s) &lt;data structure&gt; typedef int element; typedef struct StackNode { element data; struct StackNode *link; } StackNode; Connected Stack Java Applet ㅁ Picture-style Java Applet vs. Text-based VS debugging See data structures and algorithms at the same time in each output &lt;Operation&gt; Linked Stack o void push (LinkedStackType * s, element item) helleh element s) pop (LinkedStackType * 28 &lt; 400 } ext C - Structure &gt; Data &lt; 2 182 02 1 ; typedef int element typedef struct StackNode { element data ; main struct StackNode * link ; StackNode ; } -2 + 73 n 278 Data structure easily written in C ● Saengneung Publisher 2019 View stack data structure with VS ㅁ Chapter 6 We looked at the simple linked list data structure from Linked List-1 to VS (page 42 of Chapter 6.pdf) Data structure easily written in C ● Saengneung Publishing Company 2019 View structure Data stack to VS ㅁ Chapter 6 Linked List -1 to VS We have seen the simple linked list data structure (page 42 of Chapter 6.pdf). A data structure easily interpreted in C. ● Saengneung Publishing Company 2019 VSE stack. Set a breakpoint on line 35 of linked_stack.c and press the [Continue] button three times. Contents (data+link) of nodes are displayed Partial tem → dele i 19 link Ink View data structure (multi-line execution) Data structure easily written in C PE lecture 3 0x006-Setooe 00 3 0x029155a01data=211 2 003151111 - Own thread Module _0x02030203<NULL> 0x02915420 (data=311 ● Saengneung Publishing Company 2019 Data Structure View (Multiple Line Execution VSE) Set a breakpoint at line 35 of stack linked_stack.c and press the [Continue] button 3 times to see the contents (data + link) of 3 nodes. Displayed part PE steel 3 tem 0x006 - Setooe 00 → dele 3 i 0x029155a01data = 211 2 003151111 link - Ink _0x02030203 &lt; NULL &gt; 19 0x02915420 ( data = 311 Data structure easily solved with self-thread module C ● Saengneung Publisher 2019 vs. stack material View structure Ajum~ (Execute one line at a time) Stop line 31 (Execute one line at a time) OLA Ivoid push(LinkedStackType *s, element item) Name - tomo - Gink m 181 .@temp DE ㅁ StackNode *temp = (StackNode *)malloc( sizeof(StackNode)); deta item 0013319-00000000GALL] LikeSickTre Occccccccc (data????? Stocode cannot read memory &lt;Cannot read video o temp-&gt;data = item; 105 1 010-337 dk {top-23, 00002000 NULL}_Line.SeckTipe&quot; 00:165600 (data=-8121501 inked Stacklone 642150451 t didark format temp @dela 1 1 |D:D:33fcdc (top= 2:20202020<NJLL> LinkcdStackType Dxdcococd{data=&quot;&quot; ink=???} 24 ander Data structure easily written in C int StackN:de&quot; s-&gt;topi ● Saengneung Publishing Company 2019 1 NULL ~ Ajum view structure data (one line (execute one line at a time) 31 thick stack line break execution as vs ) OLA Ivoid push ( LinkedStackType * s , element item ) type name - 0013319-00000000GALL ] LikeSickTre s- &gt; topi 1 NULL Occccccccc ( data ????? Stocode tomo - cannot read memory Gink &lt; Unable to read video StackNode * temp = ( StackNode * ) malloc ( sizeof ( StackNode ) ) ; 1 m 010-337 dk { top - 23,00002000 NULL } _Line.SeckTipe &quot; 181 00 : 165600 ( data = -8121501 inked Stacklone .@temp deta 642150451 t didark = item ; temp- &gt; data o DE 24 item 1 | D : D : 33fcdc ( top = 2 : 20202020 &lt; NJLL &gt; LinkcdStackType 105 temp ander @dela 1 int Dxdcococd { data = &quot; &quot; ink = ??? } StackN : de &quot; Data structure easily written in C ● Saengneung Publisher 2019 View stack data structure with vs. Mr. (execute line by line) Ivoid push(LinkedStackType *s, element item) o temp-&gt;link = s-&gt; top • tem INS ● 1 link VE s-&gt;top = temp; ✔rm • top 1 _0013fed: [to=0&amp;DCOCOCOO <ALLL] LnkodStackp="
0000000<NULL
d
10 In
A
1
DDDDINEED
식
int
data
1
* SDDDD NII
010-33uck (Jup-00463600
Skip
| 00:165620 { data="inc=0:0202020. Stack Vode"
inm
C로 쉽게 풀어쓴 자료구조
200vnd
희.
"S:aciliode"
고
00463620{der-nc-00000000 Blackele
m
● 생능출판사 2019
s-> top. 1 NULL Ajumsi view structure data (execute one line at a time) to stack vs Ivoid push (LinkedStackType * s, element item) o temp- &gt; link = s- &gt; top Expression s- &gt; top . 1 NULL int • tem 1 INS _0013fed : [ to = 0 &amp; DCOCOCOO &lt; ALLL ] LnkodStackp = &quot; 200vnd ● 1 hee . link 0000000 &lt; NULL S : aciliode &quot; &quot; s- &gt; top = temp ; VE A 1 ✔rm go 010- 33uck ( Jup - 00463600 Skip | 00 : 165620 { data = &quot; inc = 0 : 0202020 . Stack Vode &quot; • top d inm 10 In DDDDINEED 00463620 { der - nc - 00000000 Blackele data 1 m SDDDD NII * Data easily written in C Structure ● Saengneung Publisher 2019 015 View linked list data structure with VS (execute line by line) 50 lines Breakpoint element pop(LinkedStackType *s) dit @temp 201 Det karkly 40.p 0:00253-3-00236. Succhiude 2 858003430 data : in: Ink C0025658 (cat=2 ink=0x00a560. Stochode cercera?!!nk.!!!! Ⓒhemp dele 24 in: StackNode *temp = s-&gt;top 48.klypa lup 0x00468-3-002563. Stecke @ daca 3 nt in 0x005638 (dta-2-000c2550 Stack Voce whB[data_Tinca-dacke .: nil 3 0x00a25635 (data=21-b-0x002550. Stack Voce int data = temp-&gt;data; .de 0006f810(top=2032518/ cata Li-kedStacype&quot; 00025468|d=3inc=0x002553- StockNode @deta I int &gt;kOx0025638 (dele-2-000c2560 Stock Nude 0:00a25/68 (data=3 lin&lt;=0x0a2553. StackNode&quot; int tamp da 3 › @ Ink Gwdk0N-de Data structure easily written in C S-&gt;top ● Saengneung Publishing Company 2019 1 View linked list data structure with NULL VS (execute line by line) 50 line breakpoint element pop (LinkedStackType * s) 015 2 24 858003430 dit in : 201 Det karkly 0 : 00253-3-00236 . Succhiude 40.p data : in : Ink C0025658 ( cat = 2 ink = 0x00a560 . Stochode S- &gt; top cercera ? !! nk . !!!! @temp 1 NULL StackNode * temp = s- &gt; top 48.klypa 0x00468- 3-002563. Stecke Lup @ daca 3 nt in 0x005638 (DTA -2-000C2550 Stack VOCE ⓒHEMP WHB [Data_tinca -DACKE DELE 3 NIL 0x00a25635 (DATA = 21 -B -0x002550. ce int data = temp-&gt; data; .de 0006f810 ( top = 2032518 / cata Li - kedStacype &quot; . : 00025468 | d = 3inc = 0x002553- StockNode @deta I int &gt; kOx0025638 ( dele - 2-000c2560 Stock Nude 0 : 00a25 / 68 ( data = 3 lin &lt; = 0x0a2553 . StackNode &quot; tamp da 3 int @ Ink › Gwdk0N - data structure easily written in de C ● Saengneung Publishing Company 2019 Vs linked list View data structure (execute line by line) element pop(LinkedStackType *s) emp 0x0025166 (data=0256. Stackade S-&gt;top int Ink&amp;D St 002536 (del-3-0.00226 SteckNude&quot; data 3 int Ink 0x00a25532 (data=21mk-0012560 StockNode 0.006343-00025468 da 3 s-&gt;top = s-&gt;top-&gt;link top Ox540 (top =00295638 Ida Linic:StockType (detark darke اول - 1 lin0x0025600 (data=1 li-k-xc000000 Stack Voce&quot; M BE daca Inc ☐free(tmp); bep 0025180 ink-OCCO. Staciode t darkod 0 DDDD<NJI> Data structure easily written in C ● Saengneung Publishing Company 2019 1 NULL linked Vs list View data structure (execute each line) element pop (LinkedStackType * s) 0.006343-00025468 0x0025166 ( data = 0256 . Stackade S- &gt; top int da 3 1 NULL Ink &amp; D St 002536 ( del - 3-0.00226 SteckNude &quot; emp 3 data int 0x00a25532 ( data = 21mk - 0012560 StockNode Ink s- &gt; top = s- &gt; top- &gt; link Ox540 ( top = 00295638 Ida Linic : StockType detark darke ( top اول - 1 lin0x0025600 ( data = 1 li - k - xc000000 Stack Voce &quot; M BE ☐free ( tmp ) ; 0025180 ink - OCCO . Staciode bep daca 0 t darkod Inc DDDD &lt; NJI &gt; Data structure easily written in C ● Performance Publisher 2019 Rest (Now I can do it) 1. I can implement the list data structure as a circular linked list 2. I can implement the list data structure as a doubly linked list 3. I can implement the content of the circular linked list and the doubly linked list I can show the changes line by line of C code with VS and the data structure diagram I drew. Headnode Headnode 0 4. I can implement the stack data structure as a linked list 5. I can implement the queue data structure as a linked list. Data structure easily written in C ● Saengneung Publishing Company 2019 Rest (Now I can do it) 1. I can implement the list data structure as a circular linked list 2. I can implement the list data structure as a doubly linked list 3. I can show changes in the content of circular linked lists and doubly linked lists line by line of C code using VS and data structure diagrams I drew. Head Node Head Node 0 4. I can implement the stack data structure as a linked list 5. I can implement the queue data structure as a linked list. Data structure easily written in C ● Saengneung Publisher 2019 Co implemented as a linked queue list (simple linked list) Queue: Data structure where data comes in first, goes out first ㅁFirst-In First-Out (FIFO) ㅁenqueue_rear() , dequeue_front() front A Data structure easily written in C item link B C ● Saengneung Publishing Company 2019 rear D NULL A code implemented as a linked list (simple linked list queue) Queue: A data structure where data comes in first and goes out first ㅁ First-in-first-out (FIFO: First - In First - Out ) ( ) ( ), dequeue_front enqueue_rear ㅁ front rear item link Data structure easily written in ACD NULL BC ● Saengneung Publishing Company 2019 typedef int element; // Type of element typedef struct QueueNode { //959 E element data; struct QueueNode *link; } QueueNode; typedef struct { QueueNode &quot;front, rear; } LinkedQueue Type; // Queue ADT implementation Data structure easily written in C ● Saengneung Publishing Company 2019 f // Type of element typedef int element ; 959 E typedef struct QueueNode { // element data ; struct QueueNode * link ; QueueNode ; } // Queue ADT implementation typedef struct { QueueNode &quot; front , rear ; LinkedQueue Type ; } f Data structure easily expressed in C ● Saengneung Publishing Company 2019 Insertion operation ( enqueue_rear() ) front A front A Data structure easily expressed in C B B rear C NULL ● Saengneung Publishing Company 2019 temp D NULL rear D NULL f Insertion operation ( enqueue_rear ( ) ) front temp rear C NULL D NULL AB front rear ABD NULL f Data structure easily written in C ● Saengneung Publisher 2019 front front A B } else { B } rear C NULL // Insertion function void enqueue (LinkedQueueType *q, element data ) { q-&gt;front = temp; q-&gt;rear = temp; C (1) temp D // if queue is not empty q-&gt;rear-&gt;link = temp; // (1) q-&gt;rear = temp; // (2) rear QueueNode *temp = (QueueNode *)malloc(sizeof(QueueNode)); temp-&gt;data = data; //Save data temp-&gt;link = NULL; if (is_empty(q)) { MULL (2) D NULL // NULL the link field // if the queue is empty front temp rear MULL BC NULL D front rear 2 ) ( 1 ) ( BCD NULL A // insert function void enqueue ( LinkedQueueType * q , element data ) { QueueNode * temp = ( QueueNode * ) malloc ( sizeof ( QueueNode ) ) ; // Store data temp- &gt; data = data ; // Link field to NULL temp- &gt; link = NULL ; if ( is_empty ( q ) ) { // If the queue is empty, q- &gt; front = temp ; q- &gt; rear = temp ; } else { // If the queue is not empty, q- &gt; rear- &gt; link = temp ; // ( 1 ) ; // ( 2 ) q- &gt; rear = temp } Delete operation ( dequeue_front() ) front A temp A Data structure easily written in C B front 1 B ● Saengneung Publishing Company 2019 C old rear D NULL rear D NULL delete operation ( dequeue_front ( ) ) front rear Old ABD NULL front temp rear 1 CABD NULL Data structure easily interpreted in C ● Saengneung Publisher 2019 // Delete function element dequeue(LinkedQ A { } QueueNode *temp=q-&gt; front; element data; if (is_empty(q)) { else { front } temp Data structure easily written in C q-&gt;rear = NULL; front // Empty state fprintf(stderr, &quot;Stack is empty\n&quot;); exit(1) ; free(temp); return data; B data = temp-&gt;data; // Take out data. _q-&gt;front = q-&gt;front-&gt;link; // (1) Next node to front if (q-&gt;front == NULL) // Empty state ㅇ Saengneung Publishing Company 2019 (1) // Release dynamic memory // Return data redr DMULL rear DMULL front redr DMULL front temp rear ( 1 ) // Delete function element dequeue ( LinkedQ AB DMULL { QueueNode * temp = q- &gt; front ; element data ; // Empty state if ( is_empty ( q ) ) { fprintf ( stderr , &quot; Stack is empty \ n &quot; ) ; exit ( 1 ) ; } else { data = temp- &gt; data ; // Take out data. Node link ; // Next to ( 1 ) front _q- &gt; front = q- &gt; front- &gt; if ( q- &gt; front == NULL ) // Empty state NULL ; = q- &gt; rear free ( temp ) ; // Release dynamic memory // Return data return data ; } C as well, easy to understand and write. ㅇ Saengneung Publisher 2019 Connected Java Applet ㅁ Picture method Java applet vs. text-based VS debugging See data structure and algorithm at the same time as a unit &lt;Operation&gt; □void 2 4/ME ㅍㄱ 23 *** Is AAN Data structure easily explained in C theonsiverackerSoundow ha)-9713 (232- } [ M ● Saengneung Publishing Company 2019 enqueue (LinkedQueue Type *q, element data) element de queue (LinkedQueue Type *q) &lt;data structure&gt; typedef int element; typedef struct QueueNode { element data; struct QueueNode *link; }QueueNode; connected Java applet ㅁ Picture type Java applet vs. Text type VS debugging Data structure and algorithm at the same time as a unit of output Operation &gt; &lt; void □ theonsiverackerSoundow enqueue ( LinkedQueue Type * q , element data ) ha ) -9713 M element de queue LinkedQueue ( Type * q ) ( 232 } [ data structure &gt; &lt; element ; typedef int typedef struct QueueNode { Is element data ; 4 / ME AAN 2 QueueNode struct * link ; ㅍㄱ 23 *** } QueueNode ; Data structure easily written in C ● Saengneung Publisher 2019 Now I can do it 1. I can implement the list data structure as a circular linked list 2. I can implement the list data structure as a doubly linked list. 3. I can show the changes in the content of a circularly linked list and a doubly linked list with a picture line by line of C code. Headnode Headnode 0 4. I can implement the stack data structure as a linked list. 5. I can implement the queue data structure as a linked list Data structure easily written in C ● Saengneung Publishing Company 2019 Now I can 1. I can implement the list data structure as a circular linked list 2. I can implement the list data structure as a circular linked list It can be implemented as a doubly linked list. 3. I can show the changes in the content of a circularly linked list and a doubly linked list with a picture line by line of C code. Head Node Head Node 0 4. I can implement the stack data structure as a linked list. 5. I can implement the queue data structure as a linked list. A data structure easily written in C. ● Saengneung Publishing Company 2019 Now I can implement a circular and doubly linked list. 1. How to implement the data structure as an array or linked list 2. I have now learned all the ways to implement data structures. 3. The data structures I have learned so far are Stack in Chapter 4, Queue in Chapter 5, and List in Chapter 6. In the future, I will learn Tree in Chapter 8 and learn Data Structure in Chapters 9 to 14 in the second semester. 4. Practice problems with answers every week. Be sure to solve odd-numbered problems 5. The coding test score is based on the amount of coding. The goal of college education is to &lt;create problem-solving ability&gt; in students. ㅁ Can the judgment method of &lt;creating problem-solving ability&gt; solve practice problems? &lt;Requirements from the company to developers&gt; 1. Problem-solving ability 2. Problems are occurring every day in the company, so there are a lot of practical problems. Now that &lt;problem-solving ability has been created&gt;, the company can solve the practical problems. Data structure easily written in C ● Performance ability Publisher 2019 Because there is a doubly linked prototype for a list, now I have 1. How to implement the data structure is implemented as an array or linked list 2. I have now learned all the ways to implement the data structure 3. The data structures I have learned so far are Chapter 4 Stack and Chapter 5 Queue , Chapter 6 List Next, learn Tree in Chapter 8, and learn Data Structure in Chapters 9 to 14 in the second semester 4. Be sure to solve odd-numbered practice problems with answers every week 5. Coding test scores are based on the amount of coding. The goal of college education is to help students &lt;Creating problem-solving skills&gt; ㅁ Can the judgment method of &lt;Creating problem-solving skills&gt; solve practice problems? &lt;Requirements from companies to developers&gt; 1. Problem-solving skills 2. Problems arise every day in companies, so there are a lot of practical problems. Now that &lt;problem-solving skills have been created&gt;, you can go to the company and solve practical problems. Data structure easily explained in C ● Vital skills Publisher 2019